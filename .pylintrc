[MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins=
# Add files or directories to the ignore list. They should be base names, not paths.
ignore=migrations,tests, .github # then run pylint src

ignore-patterns=test_.*\.py,.*_test\.py

[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=

# Disable the message, report, category or checker with the given id(s).
disable=
    C0114,  # Missing module docstring
    C0116,  # Missing function or method docstring
    C0103,  # Variable name doesn't conform to snake_case naming style
    R0903,  # Too few public methods (useful for data classes)
    R0201,  # Method could be a function (often useful in classes)
    R0913,  # Too many arguments
    C0411,  # Python libraries and builtins place before 3rd party
    W1203,  # logging-fstring-interpolation
    R1710,  # inconsistent-return-statements
    W0201,  # attribute-defined-outside-init
    E1121,  # too-many-function-args
    E0401,  # Missed on github
    W0718,  # Broad exception caught
    E0611, 
    C0303,
    
# Enable the message, report, category or checker with the given id(s). You
# can either give multiple identifier separated by comma (,) or put this
# option multiple times.
enable=

[REPORTS]

# Set the output format. Available formats are text, parseable, colorized,
# json and msvs (visual studio).
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

[REFACTORING]

# Maximum number of nested blocks for function/method body
max-nested-blocks=5

[BASIC]

# Naming style matching correct argument names
argument-naming-style=snake_case

# Naming style matching correct attribute names
attr-naming-style=snake_case

# Naming style matching correct class names
class-naming-style=PascalCase

# Naming style matching correct constant names
const-naming-style=UPPER_CASE

# Naming style matching correct function names
function-naming-style=snake_case

# Naming style matching correct method names
method-naming-style=snake_case

# Naming style matching correct module names
module-naming-style=snake_case

# Naming style matching correct variable names
variable-naming-style=snake_case

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,pk

[FORMAT]

# Maximum number of characters on a single line.
max-line-length=125

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of a class to be on the same line as the class keyword
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the if keyword
single-line-if-stmt=no

[IMPORTS]

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and 3 compatible code, which means having 
# some fallbacks for imports when a module is not present on either Python version.
analyse-fallback-blocks=yes

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=

[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO

[DESIGN]

# Maximum number of arguments for function / method
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=10

# Maximum number of boolean expressions in a if statement
max-bool-expr=5

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a method.
valid-metaclass-classmethod-first-arg=mcs

; [EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to 
# "Exception"
; overgeneral-exceptions=Exception